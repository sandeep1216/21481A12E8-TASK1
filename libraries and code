LIBRARIES:

!pip install PyPDF2 sentence-transformers faiss-cpu
pip install PyPDF2 sentence-transformers faiss-cpu
pip install faiss-gpu



CODE:

import PyPDF2
from sentence_transformers import SentenceTransformer
import faiss
import numpy as np

# Load PDF and extract text
def extract_text_from_pdf(pdf_path):
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
    return text

# Chunking and embedding
def chunk_and_embed(text, model):
    chunks = text.split('\n\n')  # Simple chunking by paragraphs
    embeddings = model.encode(chunks)
    return chunks, embeddings

# Store embeddings in a vector database
def store_embeddings(embeddings):
    index = faiss.IndexFlatL2(embeddings.shape[1])  # L2 distance
    index.add(embeddings)
    return index

# Query handling
def handle_query(query, model, index, chunks):
    query_embedding = model.encode([query])
    D, I = index.search(query_embedding, k=5)  # Retrieve top 5 results
    return list(set(chunks[i] for i in I[0]))  # Use set to avoid duplicates

# Format output as bullet points
def format_as_bullet_points(relevant_chunks):
    return "\n".join(f"- {chunk.strip()}" for chunk in relevant_chunks)

# Example usage
pdf_path = '/content/sample_data/path_to_pdf.pdf'  # Replace with your PDF file path
model = SentenceTransformer('all-MiniLM-L6-v2')
text = extract_text_from_pdf(pdf_path)
chunks, embeddings = chunk_and_embed(text, model)
index = store_embeddings(embeddings)

user_query = "What is the unemployment rate for bachelor's degree holders?"
relevant_chunks = handle_query(user_query, model, index, chunks)

# Print the results in bullet-point format
bullet_point_output = format_as_bullet_points(relevant_chunks)
print(bullet_point_output)




